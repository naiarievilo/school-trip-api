// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SchoolTripApi.Domain.Common.Enums;
using SchoolTripApi.Infrastructure.Data;

#nullable disable

namespace SchoolTripApi.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251013192435_Add_Rg_Property_To_Guardian_and_Student")]
    partial class Add_Rg_Property_To_Guardian_and_Student
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradeLevelSchool", b =>
                {
                    b.Property<int>("GradesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uuid");

                    b.HasKey("GradesId", "SchoolsId");

                    b.HasIndex("SchoolsId");

                    b.ToTable("GradeLevelSchool");
                });

            modelBuilder.Entity("GradeLevelSchoolTrip", b =>
                {
                    b.Property<int>("GradesId")
                        .HasColumnType("integer");

                    b.Property<int>("TripsId")
                        .HasColumnType("integer");

                    b.HasKey("GradesId", "TripsId");

                    b.HasIndex("TripsId");

                    b.ToTable("GradeLevelSchoolTrip");
                });

            modelBuilder.Entity("GuardianSchool", b =>
                {
                    b.Property<Guid>("GuardiansId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolsId")
                        .HasColumnType("uuid");

                    b.HasKey("GuardiansId", "SchoolsId");

                    b.HasIndex("SchoolsId");

                    b.ToTable("GuardianSchool");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolTripApi.Domain.AgreementAggregate.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AgreementTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AgreementTemplateId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuardianId");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SchoolTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SchoolTripId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<DateTimeOffset?>("SignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgreementTemplateId");

                    b.HasIndex("GuardianId");

                    b.HasIndex("SchoolTripId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.AgreementAggregate.AgreementTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RichTextContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AgreementTemplates");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.EnrollmentAggregate.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuardianId");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("PaymentId");

                    b.Property<int>("SchoolTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SchoolTripId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SchoolTripId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.GradeLevelAggregate.GradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GradeLevelCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.GuardianAggregate.Guardian", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("AccountId");

                    b.Property<string>("Cpf")
                        .HasColumnType("text")
                        .HasColumnName("Cpf");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("FullName");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Rg")
                        .HasColumnType("text")
                        .HasColumnName("Rg");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.PaymentAggregate.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuardianId");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.RatingAggregate.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Comment");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuardianId");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("SchoolTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SchoolTripId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int>("TripRating")
                        .HasColumnType("integer")
                        .HasColumnName("TripRating");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.HasIndex("SchoolTripId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolAggregate.School", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Cnpj");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgreementTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AgreementTemplateId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DepartureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("ReturnAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SaleEndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SaleStartsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("SchoolId");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Summary");

                    b.HasKey("Id");

                    b.HasIndex("AgreementTemplateId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolTrips");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.StudentAggregate.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Cpf");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FullName");

                    b.Property<int?>("GradeClass")
                        .HasColumnType("integer");

                    b.Property<int>("GradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GradeLevelId")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid")
                        .HasColumnName("GuardianId");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Rg");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("GuardianId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolTripApi.Infrastructure.Security.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("UnlockMessageSent")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SchoolTripApi.Infrastructure.Security.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 10, 13, 19, 24, 34, 703, DateTimeKind.Utc).AddTicks(4410));

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TokenFamily")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GradeLevelSchool", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GradeLevelAggregate.GradeLevel", null)
                        .WithMany()
                        .HasForeignKey("GradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolAggregate.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradeLevelSchoolTrip", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GradeLevelAggregate.GradeLevel", null)
                        .WithMany()
                        .HasForeignKey("GradesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuardianSchool", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", null)
                        .WithMany()
                        .HasForeignKey("GuardiansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolAggregate.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolTripApi.Infrastructure.Security.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolTripApi.Infrastructure.Security.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Infrastructure.Security.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolTripApi.Infrastructure.Security.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTripApi.Domain.AgreementAggregate.Agreement", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.AgreementAggregate.AgreementTemplate", "AgreementTemplate")
                        .WithMany("Agreements")
                        .HasForeignKey("AgreementTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", "Guardian")
                        .WithMany("Agreements")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", "SchoolTrip")
                        .WithMany("Agreements")
                        .HasForeignKey("SchoolTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgreementTemplate");

                    b.Navigation("Guardian");

                    b.Navigation("SchoolTrip");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.EnrollmentAggregate.Enrollment", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", "Guardian")
                        .WithMany("Enrollments")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.PaymentAggregate.Payment", "Payment")
                        .WithMany("Enrollments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", "SchoolTrip")
                        .WithMany("Enrollments")
                        .HasForeignKey("SchoolTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.StudentAggregate.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guardian");

                    b.Navigation("Payment");

                    b.Navigation("SchoolTrip");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.GuardianAggregate.Guardian", b =>
                {
                    b.OwnsOne("SchoolTripApi.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("GuardianId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Cep");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("GuardianId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianId");
                        });

                    b.OwnsOne("SchoolTripApi.Domain.GuardianAggregate.ValueObjects.EmergencyContact", "EmergencyContact", b1 =>
                        {
                            b1.Property<Guid>("GuardianId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("GuardianId");

                            b1.ToTable("Guardians");

                            b1.WithOwner()
                                .HasForeignKey("GuardianId");
                        });

                    b.Navigation("Address");

                    b.Navigation("EmergencyContact");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.PaymentAggregate.Payment", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", "Guardian")
                        .WithMany("Payments")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolTripApi.Domain.Common.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Amount");

                            b1.Property<CurrencyCode>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.RatingAggregate.Rating", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", "Guardian")
                        .WithMany("Ratings")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", "SchoolTrip")
                        .WithMany("Ratings")
                        .HasForeignKey("SchoolTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");

                    b.Navigation("SchoolTrip");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolAggregate.School", b =>
                {
                    b.OwnsOne("SchoolTripApi.Domain.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SchoolId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Cep");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("SchoolId");

                            b1.ToTable("Schools");

                            b1.WithOwner()
                                .HasForeignKey("SchoolId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.AgreementAggregate.AgreementTemplate", "AgreementTemplate")
                        .WithMany("SchoolTrips")
                        .HasForeignKey("AgreementTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolAggregate.School", "School")
                        .WithMany("Trips")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SchoolTripApi.Domain.Common.ValueObjects.Address", "DepartureAddress", b1 =>
                        {
                            b1.Property<int>("SchoolTripId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Cep");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Neighborhood");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StreetNumber");

                            b1.HasKey("SchoolTripId");

                            b1.ToTable("SchoolTrips");

                            b1.WithOwner()
                                .HasForeignKey("SchoolTripId");
                        });

                    b.OwnsOne("SchoolTripApi.Domain.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<int>("SchoolTripId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("Amount");

                            b1.Property<CurrencyCode>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("Currency");

                            b1.HasKey("SchoolTripId");

                            b1.ToTable("SchoolTrips");

                            b1.WithOwner()
                                .HasForeignKey("SchoolTripId");
                        });

                    b.OwnsOne("SchoolTripApi.Domain.SchoolTripAggregate.ValueObjects.ParticipantsCapacity", "ParticipantsCapacity", b1 =>
                        {
                            b1.Property<int>("SchoolTripId")
                                .HasColumnType("integer");

                            b1.Property<int>("MaximumAllowed")
                                .HasColumnType("integer")
                                .HasColumnName("MaximumAllowed");

                            b1.Property<int>("MinimumRequired")
                                .HasColumnType("integer")
                                .HasColumnName("MinimumRequired");

                            b1.HasKey("SchoolTripId");

                            b1.ToTable("SchoolTrips");

                            b1.WithOwner()
                                .HasForeignKey("SchoolTripId");
                        });

                    b.Navigation("AgreementTemplate");

                    b.Navigation("DepartureAddress")
                        .IsRequired();

                    b.Navigation("ParticipantsCapacity")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.StudentAggregate.Student", b =>
                {
                    b.HasOne("SchoolTripApi.Domain.GradeLevelAggregate.GradeLevel", "GradeLevel")
                        .WithMany("Students")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.GuardianAggregate.Guardian", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolTripApi.Domain.SchoolAggregate.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradeLevel");

                    b.Navigation("Guardian");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolTripApi.Infrastructure.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("SchoolTripApi.Infrastructure.Security.Entities.Account", "User")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.AgreementAggregate.AgreementTemplate", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("SchoolTrips");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.GradeLevelAggregate.GradeLevel", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.GuardianAggregate.Guardian", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Enrollments");

                    b.Navigation("Payments");

                    b.Navigation("Ratings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.PaymentAggregate.Payment", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolAggregate.School", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.SchoolTripAggregate.SchoolTrip", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Enrollments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("SchoolTripApi.Domain.StudentAggregate.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
